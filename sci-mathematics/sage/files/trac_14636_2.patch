# HG changeset patch
# User Francois Bissey <francois.bissey@canterbury.ac.nz>
# Date 1369678106 -7200
# Node ID dba4e89fca6499b6a63b4202af0bff314bf8e912
# Parent  a3f4064a1f3b5078311ad92d567b352d9a90166c
Make sage work with ecl compiled with unicode support, which is #12985 and part of #14636

diff --git a/sage/libs/ecl.pxd b/sage/libs/ecl.pxd
--- a/sage/libs/ecl.pxd
+++ b/sage/libs/ecl.pxd
@@ -134,6 +134,7 @@
     cl_object ecl_read_from_cstring_safe(char *s, cl_object err)
     cl_object cl_write_to_string(cl_narg narg, cl_object o) 
     cl_object ecl_cstring_to_base_string_or_nil(char *s)
+    cl_object si_coerce_to_base_string(cl_object x)
     
     # S-expr evaluation and function calls
     
diff --git a/sage/libs/ecl.pyx b/sage/libs/ecl.pyx
--- a/sage/libs/ecl.pyx
+++ b/sage/libs/ecl.pyx
@@ -241,17 +241,19 @@
         ...
         RuntimeError: ECL says: Console interrupt.
     """
+    cdef cl_object s
     ecl_sig_on()
     cl_funcall(2,safe_eval_clobj,form)
     ecl_sig_off()
 
     if ecl_nvalues > 1:
-        raise RuntimeError, "ECL says: "+ecl_base_string_pointer_safe(ecl_values(1))
+        s = si_coerce_to_base_string(ecl_values(1))
+        raise RuntimeError, "ECL says: "+ecl_base_string_pointer_safe(s)
     else:
         return ecl_values(0)
 
 cdef cl_object ecl_safe_funcall(cl_object func, cl_object arg) except NULL:
-    cdef cl_object l
+    cdef cl_object l, s
     l = cl_cons(func,cl_cons(arg,Cnil));
 
     ecl_sig_on()
@@ -259,17 +261,20 @@
     ecl_sig_off()
 
     if ecl_nvalues > 1:
-        raise RuntimeError, "ECL says: "+ecl_base_string_pointer_safe(ecl_values(1))
+        s = si_coerce_to_base_string(ecl_values(1))
+        raise RuntimeError, "ECL says: "+ecl_base_string_pointer_safe(s)
     else:
         return ecl_values(0)
 
 cdef cl_object ecl_safe_apply(cl_object func, cl_object args) except NULL:
+    cdef cl_object s
     ecl_sig_on()
     cl_funcall(3,safe_apply_clobj,func,args)
     ecl_sig_off()
 
     if ecl_nvalues > 1:
-        raise RuntimeError, "ECL says: "+ecl_base_string_pointer_safe(ecl_values(1))
+        s = si_coerce_to_base_string(ecl_values(1))
+        raise RuntimeError, "ECL says: "+ecl_base_string_pointer_safe(s)
     else:
         return ecl_values(0)
 
@@ -319,10 +324,11 @@
         HELLO
     """
     
-    cdef cl_object c
+    cdef cl_object c, s
     c = list_of_objects
     while True:
-        print ecl_base_string_pointer_safe(cl_write_to_string(1,cl_car(c)))
+        s = si_coerce_to_base_string(cl_write_to_string(1,cl_car(c)))
+        print ecl_base_string_pointer_safe(s)
         c=cl_cadr(c)
         if c == Cnil:
             break
@@ -397,6 +403,7 @@
         raise TypeError,"Unimplemented type for python_to_ecl"
 
 cdef ecl_to_python(cl_object o):
+    cdef cl_object s
     cdef Integer N
     # conversions from an ecl object to a python object.
 
@@ -431,7 +438,8 @@
                 return tuple(L)
         return L
     else:
-        return ecl_base_string_pointer_safe(cl_write_to_string(1,o))
+        s = si_coerce_to_base_string(cl_write_to_string(1,o))
+        return ecl_base_string_pointer_safe(s)
 
 #Maxima's BFLOAT multiprecision float type can be read with:
 #def bfloat_to_python(e):
@@ -647,7 +655,7 @@
 
         """
         cdef cl_object s
-        s = cl_write_to_string(1,self.obj)
+        s = si_coerce_to_base_string(cl_write_to_string(1,self.obj))
         return ecl_base_string_pointer_safe(s)
 
     def __hash__(self):
